const path = require('path');
const webpack = require('webpack');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;//bundle组成分析

module.exports = function (env) {
    const platform= env?JSON.stringify(env.platform):'"development"'; //''development'' || ''production''
    console.log('env platform:',env,platform,'is production:',platform==='"production"');
    let plugins=[
        //打包环境
        new webpack.DefinePlugin({
            //'process.env.NODE_ENV': platform
            'process.env': {
                NODE_ENV: platform
            }
        }),
        //提取公共部分
        new webpack.optimize.CommonsChunkPlugin({
            names: 'bundle',
            //minChunks: 3,//3个页面用到才会提取公共
            minChunks: Infinity,
            //chunks:[] //这些页面才会提取
        }),
        new webpack.HotModuleReplacementPlugin({
            // Options...
        })
    ];
    if(platform==='\'production\''){
        plugins.push(
            //压缩
            //https://github.com/mishoo/UglifyJS2#mangleproperties-options
            new webpack.optimize.UglifyJsPlugin({
                compress: {
                    warnings: false,
                    drop_debugger: true,
                    drop_console: true
                },
                comments: false
            })
        );
    }else{
        plugins.push(
            new BundleAnalyzerPlugin({
                // Can be `server`, `static` or `disabled`.
                // In `server` mode analyzer will start HTTP server to show bundle report.
                // In `static` mode single HTML file with bundle report will be generated.
                // In `disabled` mode you can use this plugin to just generate Webpack Stats JSON file by setting `generateStatsFile` to `true`.
                analyzerMode: 'server',
                // Host that will be used in `server` mode to start HTTP server.
                analyzerHost: '127.0.0.1',
                // Port that will be used in `server` mode to start HTTP server.
                analyzerPort: 8888,
                // Path to bundle report file that will be generated in `static` mode.
                // Relative to bundles output directory.
                reportFilename: 'report.html',
                // Module sizes to show in report by default.
                // Should be one of `stat`, `parsed` or `gzip`.
                // See "Definitions" section for more information.
                defaultSizes: 'parsed',
                // Automatically open report in default browser
                openAnalyzer: true,
                // If `true`, Webpack Stats JSON file will be generated in bundles output directory
                generateStatsFile: false,
                // Name of Webpack Stats JSON file that will be generated if `generateStatsFile` is `true`.
                // Relative to bundles output directory.
                statsFilename: 'stats.json',
                // Options for `stats.toJson()` method.
                // For example you can exclude sources of your modules from stats file with `source: false` option.
                // See more options here: https://github.com/webpack/webpack/blob/webpack-1/lib/Stats.js#L21
                statsOptions: null,
                // Log level. Can be 'info', 'warn', 'error' or 'silent'.
                logLevel: 'info'
            })
        );
    }
    

    return (
        {
            devServer: {
                contentBase: path.join(__dirname, 'public'),
                compress: false,
                port: 8880,
                host: '0.0.0.0',
                disableHostCheck: true,
                hot: true
            },
            entry: {

                //公共部分
                'bundle': ['babel-polyfill','whatwg-fetch', 'react-dom', 'react'],

                //首页
                'index': ['./src/page/index.js'],
                //'detail': ['./src/page/detail.js'],
                

            },
            output: {
                path: path.resolve(__dirname, './public/build/'),
                filename: '[name].js',
                publicPath: 'build/',//webpack-dev-server静态资源路径
            },
            module: {
                rules: [
                    {
                        test: /\.js$/,
                        include: [
                            path.resolve(__dirname, './lib/'),
                            path.resolve(__dirname, './src/')
                        ],
                        //exclude: [],
                        loader: 'babel-loader',
                        options: {
                            cacheDirectory: true,
                            babelrc: false,
                            presets: [
                                'es2015',
                                'stage-1',
                                'react',
                            ],
                            plugins: [
                                //'transform-decorators-legacy',
                                //'transform-class-properties',
                            ]
                        }
                    },
                    {
                        test: /\.css$/,
                        use: [
                            'style-loader',
                            'css-loader',
                            'autoprefixer-loader'
                        ]
                    },
                    {
                        test: /\.scss$/,
                        use: [
                            'style-loader',
                            'css-loader',
                            'autoprefixer-loader',
                            'sass-loader'
                        ]
                    },
                    {
                        test: /\.(gif|jpe?g|png|svg)$/,
                        use: [
                            {
                                loader: 'url-loader',
                                options: {
                                    limit: 8192
                                }
                            },
                            {
                                loader: 'image-webpack-loader',
                                options: {
                                    progressive: true,
                                    optimizationLevel: 7,
                                    interlaced: false,
                                    pngquant: {
                                        quality: '65-90'
                                    },
                                    speed: 4
                                }
                            }
                        ]
                    }
                ]
            },
            plugins: plugins,
            resolve: {
                alias: Object.assign(
                    {},
                    {
                        //'react-native': 'react-native-web',
                        //'audaque-ssz': path.resolve(__dirname, 'lib/audaque-ssz'),
                        
                    }
                ),
                extensions: ['.web.js', '.js']

            }

        }
    );
};
